from typing import List
from mcp.types import Resource

def get_available_resources() -> List[Resource]:
    """Get all available MCP resources"""
    
    return [
        Resource(
            uri="github://{owner}/{repo}/contents/{path}",
            name="GitHub Repository File",
            description="Access file contents from GitHub repositories",
            mimeType="text/plain"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/structure",
            name="GitHub Repository Structure",
            description="Get repository directory structure and file tree",
            mimeType="application/json"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/readme",
            name="GitHub Repository README",
            description="Get repository README content",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/issues",
            name="GitHub Repository Issues",
            description="Get repository issues list",
            mimeType="application/json"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/pull_requests",
            name="GitHub Repository Pull Requests",
            description="Get repository pull requests list",
            mimeType="application/json"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/commits",
            name="GitHub Repository Commits",
            description="Get repository commit history",
            mimeType="application/json"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/contributors",
            name="GitHub Repository Contributors",
            description="Get repository contributors list",
            mimeType="application/json"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/languages",
            name="GitHub Repository Languages",
            description="Get repository language statistics",
            mimeType="application/json"
        ),
        
        Resource(
            uri="github://{owner}/{repo}/releases",
            name="GitHub Repository Releases",
            description="Get repository releases information",
            mimeType="application/json"
        ),
        
        Resource(
            uri="analysis://{type}/{owner}/{repo}",
            name="Repository Analysis",
            description="AI-powered repository analysis and insights",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://summary/{owner}/{repo}",
            name="Repository Summary",
            description="Intelligent repository summary generated by Gemini AI",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://metrics/{owner}/{repo}",
            name="Repository Metrics Analysis",
            description="Detailed analysis of repository metrics and trends",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://architecture/{owner}/{repo}",
            name="Architecture Analysis",
            description="Code architecture and design pattern analysis",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://security/{owner}/{repo}",
            name="Security Analysis",
            description="Security assessment and vulnerability analysis",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://quality/{owner}/{repo}",
            name="Code Quality Analysis",
            description="Code quality metrics and improvement suggestions",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://dependencies/{owner}/{repo}",
            name="Dependency Analysis",
            description="Dependency analysis and vulnerability scanning",
            mimeType="application/json"
        ),
        
        Resource(
            uri="analysis://performance/{owner}/{repo}",
            name="Performance Analysis",
            description="Performance bottleneck identification and optimization suggestions",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://documentation/{owner}/{repo}",
            name="Documentation Analysis",
            description="Documentation completeness and quality assessment",
            mimeType="text/markdown"
        ),
        
        Resource(
            uri="analysis://testing/{owner}/{repo}",
            name="Testing Analysis",
            description="Test coverage and testing strategy analysis",
            mimeType="text/markdown"
        )
    ]
